generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Objects {
  id         String   @id @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  name       String   @db.VarChar(255)
  path       String   @db.VarChar(255)
  type       String   @db.VarChar(255)
  user_id    Int
  object_for String   @db.VarChar(100)
  Users      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "objects_ibfk_1")

  @@index([user_id], map: "user_id")
}

model TokenSessions {
  id          Int         @id @default(autoincrement())
  created_for String      @db.VarChar(55)
  token       String      @db.VarChar(255)
  payload     Json
  expired_in  String      @db.VarChar(55)
  owner_id    Int
  UserDetails UserDetails @relation(fields: [owner_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "tokensessions_ibfk_1")

  @@index([owner_id], map: "owner_id")
}

model UserDetails {
  phone            String?         @unique(map: "phone") @db.VarChar(255)
  birthday         DateTime?       @db.Date
  bio              String?         @db.VarChar(510)
  email_registered Boolean
  preferred_lang   String?         @db.VarChar(50)
  profile_photo_id String?         @db.VarChar(255)
  user_id          Int             @id @unique(map: "user_id")
  TokenSessions    TokenSessions[]
  Users            Users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userdetails_ibfk_1")
}

model Users {
  id                 Int                  @id @default(autoincrement())
  fullname           String               @db.VarChar(255)
  email              String               @unique(map: "email") @db.VarChar(255)
  password           String               @db.VarChar(255)
  register_date      String               @db.VarChar(55)
  AIConversationKeys AIConversationKeys[]
  Objects            Objects[]
  UserDetails        UserDetails?
}

model AIConversationKeys {
  id                    Int                     @id @default(autoincrement())
  conversation_key      String                  @unique @db.VarChar(255)
  user_id               Int
  created_at            DateTime                @default(now()) @db.DateTime(0)
  key_name              String                  @db.VarChar(255)
  model                 String                  @db.VarChar(255)
  topic                 String?                 @db.Text
  AIConversationHistory AIConversationHistory[]
  Users                 Users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "user_id")
}

model AIConversationHistory {
  conversation_id    Int                @id @default(autoincrement())
  conversation_key   String             @db.VarChar(255)
  question           String             @db.Text
  response           String             @db.Text
  created_at         DateTime           @default(now()) @db.DateTime(0)
  AIConversationKeys AIConversationKeys @relation(fields: [conversation_key], references: [conversation_key], onDelete: Cascade, onUpdate: NoAction)

  @@index([conversation_key], map: "conversation_key")
}
